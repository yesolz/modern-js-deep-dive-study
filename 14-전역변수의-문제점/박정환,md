# 14. 전역 변수의 문제점

### 무분별한 사용은 위험하다.

<aside>
💡

**전역 객체**

코드 실행 전 엔진에 의해 어떤 객체보다도 먼저 생성되는 특수 객체

브라우저에서는 window, 서버 사이드(Node.js)에서는 global 객체를 의미

</aside>

## 14.1 변수의 생명 주기

### 지역 변수의 생명 주기

- **전역변수**
    - 애플리케이션 생명 주기와 같다.

- **지역변수**
    - 함수가 호출되면 생성된다.
    - 함수가 종료하면 소멸한다.
    
    (함수가 호출되지 않는다면 생성되지 않는다.)
    
    [4.4 변수 선언의 실행 시점과 변수 호이스팅](https://www.notion.so/4-4-8717bb4770084ff2b74c8a54cf0c6b29?pvs=21) 
    
    (참고)
    
    함수 안에 변수는 런타임 이전 엔진에 의해서 먼저 실행된다.
    
    ```jsx
    function add () {
    	var x = 213;
    	return x;
    }
    
    add();
    ```
    
    x는 undefined로 초기화가 일어나고 함수 호출이 일어나면 213값이 할당된다.
    
    ```jsx
    var x = 211;
    
    function add () {
     console.log(x); // 213
    	var x = 213;
    }
    
    add();
    ```
    
    콘솔은 전역이 아닌 지역 변수의 값을 낸다.
    
    **호이스팅은 변수 선언이 스코프의 선두로 끌어 올려진 것 처럼 동작하는 자바스크립트의고유의 특징을 말한다.**
    

### 전역 변수의 생명 주기

**전역 코드는 명시적 호출이 없이 실행된다.**

전역 코드에는 반환문을 사용할 수 없으므로 더 이상 실행할 문이 없을 때 종료한다.

브라우저 환경에선 웹페이지를 닫을 때 까지 유효하다.

**즉 var 키워드로 선언한 전역 변수의 생명 주기는 전역 객체의 생명 주기와 일치**

## 14.2 전역 변수의 문제점

- **암묵적 결합**
    - 전역 변수는 어디서든 참조하고 할당이 가능하다.
    - 모든 코드가 전역 변수를 참조하고 변경할 수 있는 **암묵적 결합**을 허용하는 것

- **긴 생명 주기**
    - 메모리 리소스 오래 소비
    - 변수의 상태 변경 시간이 김
    - var 키워드는 중복 선언이 가능하여 변수 이름이 중복될 가능성이 큼
        
        (의도치 않은 재할당)
        
    
- **스코프 체인 상에서 종점에 존재**
    - 전역 변수의 검색 속도가 가장 느리다.

- **네임스페이스 오염**
    - 파일이 분리되어 있다 해도 하나의 전역 스코프를 공유한다.

## 14.3 전역 변수의 사용을 억제하는 방법

### 전역 변수를 반드시 사용해야 할 이유를 찾지 못한다면 지역 변수를 사용해야 한다.

### 즉시 실행 함수

**모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다.**

```jsx
(function () {
	var foo = 10;
}());
```

### 네임스페이스 객체

네임스페이스 역할을 담당할 객체를 생성하고 전역 변수 처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법

```jsx
var ABC = {}; // 전역 네임스페이스 객체

ABC.name = "Lee";

console.log(ABC.name); // Lee

// 계층적 구성도 가능하다.

ABC.preson = {
	name : 'Lee',
	adress : 'Seoul'
};

console.log(ABC.preson.name); // Lee
```

### 모듈 패턴

### ES6 모듈
